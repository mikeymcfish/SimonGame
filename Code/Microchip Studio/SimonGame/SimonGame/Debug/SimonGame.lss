
SimonGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00803800  00000912  000009a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00803806  00803806  000009ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000a20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004440  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002324  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001239  00000000  00000000  00007344  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00008580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000141e  00000000  00000000  0000876c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f45  00000000  00000000  00009b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000aacf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
  88:	18 e3       	ldi	r17, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	e2 e1       	ldi	r30, 0x12	; 18
  90:	f9 e0       	ldi	r31, 0x09	; 9
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	28 e3       	ldi	r18, 0x38	; 56
  a0:	a6 e0       	ldi	r26, 0x06	; 6
  a2:	b8 e3       	ldi	r27, 0x38	; 56
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 31       	cpi	r26, 0x1E	; 30
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main>
  b2:	0c 94 87 04 	jmp	0x90e	; 0x90e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  ba:	0e 94 20 03 	call	0x640	; 0x640 <system_init>
  be:	08 95       	ret

000000c0 <displayNumber>:
// change this with ADC:
int psuedo = 14;

void displayNumber(int NUM) {
	
	PORTA_OUT = 0; 
  c0:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
	
	for (int i = 0; i < LOOP_COUNT; i++) {
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	46 c0       	rjmp	.+140    	; 0x156 <__EEPROM_REGION_LENGTH__+0x56>
		
		NUM & 1 << 0 ? PORTA_OUT = ENABLE | A : 1;
  ca:	80 ff       	sbrs	r24, 0
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <displayNumber+0x14>
  ce:	94 e0       	ldi	r25, 0x04	; 4
  d0:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	97 e3       	ldi	r25, 0x37	; 55
  d6:	9a 95       	dec	r25
  d8:	f1 f7       	brne	.-4      	; 0xd6 <displayNumber+0x16>
  da:	00 c0       	rjmp	.+0      	; 0xdc <displayNumber+0x1c>
		_delay_us(DEL);
		NUM & 1 << 1 ? PORTA_OUT = ENABLE | B : 1;
  dc:	81 ff       	sbrs	r24, 1
  de:	03 c0       	rjmp	.+6      	; 0xe6 <displayNumber+0x26>
  e0:	94 e4       	ldi	r25, 0x44	; 68
  e2:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
  e6:	97 e3       	ldi	r25, 0x37	; 55
  e8:	9a 95       	dec	r25
  ea:	f1 f7       	brne	.-4      	; 0xe8 <displayNumber+0x28>
  ec:	00 c0       	rjmp	.+0      	; 0xee <displayNumber+0x2e>
		_delay_us(DEL);
		NUM & 1 << 2 ? PORTA_OUT = ENABLE | C : 1;
  ee:	82 ff       	sbrs	r24, 2
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <displayNumber+0x38>
  f2:	94 e2       	ldi	r25, 0x24	; 36
  f4:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
  f8:	97 e3       	ldi	r25, 0x37	; 55
  fa:	9a 95       	dec	r25
  fc:	f1 f7       	brne	.-4      	; 0xfa <displayNumber+0x3a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <__EEPROM_REGION_LENGTH__>
		_delay_us(DEL);		
		NUM & 1 << 3 ? PORTA_OUT = ENABLE | D : 1;
 100:	83 ff       	sbrs	r24, 3
 102:	03 c0       	rjmp	.+6      	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
 104:	94 e6       	ldi	r25, 0x64	; 100
 106:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
 10a:	97 e3       	ldi	r25, 0x37	; 55
 10c:	9a 95       	dec	r25
 10e:	f1 f7       	brne	.-4      	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
		_delay_us(DEL);
		NUM & 1 << 4 ? PORTA_OUT = ENABLE | E : 1;
 112:	84 ff       	sbrs	r24, 4
 114:	03 c0       	rjmp	.+6      	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
 116:	94 e1       	ldi	r25, 0x14	; 20
 118:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
 11c:	97 e3       	ldi	r25, 0x37	; 55
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <__EEPROM_REGION_LENGTH__+0x1e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
		_delay_us(DEL);
		NUM & 1 << 5 ? PORTA_OUT = ENABLE | F : 1;
 124:	85 ff       	sbrs	r24, 5
 126:	03 c0       	rjmp	.+6      	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
 128:	94 e5       	ldi	r25, 0x54	; 84
 12a:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
 12e:	97 e3       	ldi	r25, 0x37	; 55
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <__EEPROM_REGION_LENGTH__+0x30>
 134:	00 c0       	rjmp	.+0      	; 0x136 <__EEPROM_REGION_LENGTH__+0x36>
		_delay_us(DEL);
		NUM & 1 << 6 ? PORTA_OUT = ENABLE | G : 1;
 136:	86 ff       	sbrs	r24, 6
 138:	03 c0       	rjmp	.+6      	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
 13a:	94 e3       	ldi	r25, 0x34	; 52
 13c:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
 140:	97 e3       	ldi	r25, 0x37	; 55
 142:	9a 95       	dec	r25
 144:	f1 f7       	brne	.-4      	; 0x142 <__EEPROM_REGION_LENGTH__+0x42>
 146:	00 c0       	rjmp	.+0      	; 0x148 <__EEPROM_REGION_LENGTH__+0x48>
		_delay_us(DEL);
		PORTA_OUT &= 0b10001111;
 148:	e4 e0       	ldi	r30, 0x04	; 4
 14a:	f4 e0       	ldi	r31, 0x04	; 4
 14c:	90 81       	ld	r25, Z
 14e:	9f 78       	andi	r25, 0x8F	; 143
 150:	90 83       	st	Z, r25

void displayNumber(int NUM) {
	
	PORTA_OUT = 0; 
	
	for (int i = 0; i < LOOP_COUNT; i++) {
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	20 3b       	cpi	r18, 0xB0	; 176
 158:	94 e0       	ldi	r25, 0x04	; 4
 15a:	39 07       	cpc	r19, r25
 15c:	0c f4       	brge	.+2      	; 0x160 <__EEPROM_REGION_LENGTH__+0x60>
 15e:	b5 cf       	rjmp	.-150    	; 0xca <displayNumber+0xa>
		_delay_us(DEL);
		NUM & 1 << 6 ? PORTA_OUT = ENABLE | G : 1;
		_delay_us(DEL);
		PORTA_OUT &= 0b10001111;
	}
	PORTA_OUT &= 0b10000011; 
 160:	e4 e0       	ldi	r30, 0x04	; 4
 162:	f4 e0       	ldi	r31, 0x04	; 4
 164:	80 81       	ld	r24, Z
 166:	83 78       	andi	r24, 0x83	; 131
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <lightLED>:
	
}

void lightLED (int i) {
	
	PORTB_OUT = 1 << i;
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	08 2e       	mov	r0, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <lightLED+0xc>
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <lightLED+0x8>
 17c:	20 93 24 04 	sts	0x0424, r18	; 0x800424 <__RODATA_PM_OFFSET__+0x7f8424>
	switch (i)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	91 05       	cpc	r25, r1
 184:	89 f0       	breq	.+34     	; 0x1a8 <lightLED+0x3c>
 186:	1c f4       	brge	.+6      	; 0x18e <lightLED+0x22>
 188:	89 2b       	or	r24, r25
 18a:	39 f0       	breq	.+14     	; 0x19a <lightLED+0x2e>
 18c:	21 c0       	rjmp	.+66     	; 0x1d0 <lightLED+0x64>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	91 05       	cpc	r25, r1
 192:	89 f0       	breq	.+34     	; 0x1b6 <lightLED+0x4a>
 194:	03 97       	sbiw	r24, 0x03	; 3
 196:	b1 f0       	breq	.+44     	; 0x1c4 <lightLED+0x58>
 198:	1b c0       	rjmp	.+54     	; 0x1d0 <lightLED+0x64>
	{
	case 0:
		playNote(B3,NOTE_DURATION);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	70 ef       	ldi	r23, 0xF0	; 240
 19e:	87 e7       	ldi	r24, 0x77	; 119
 1a0:	96 e0       	ldi	r25, 0x06	; 6
 1a2:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
		break;
 1a6:	14 c0       	rjmp	.+40     	; 0x1d0 <lightLED+0x64>
	case 1:
		playNote(C4,NOTE_DURATION);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	70 ef       	ldi	r23, 0xF0	; 240
 1ac:	8a e1       	ldi	r24, 0x1A	; 26
 1ae:	96 e0       	ldi	r25, 0x06	; 6
 1b0:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
		break;
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <lightLED+0x64>
	case 2:
		playNote(D5,NOTE_DURATION);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 ef       	ldi	r23, 0xF0	; 240
 1ba:	88 eb       	ldi	r24, 0xB8	; 184
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
		break;
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <lightLED+0x64>
	case 3:
		playNote(E6,NOTE_DURATION);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 ef       	ldi	r23, 0xF0	; 240
 1c8:	86 e3       	ldi	r24, 0x36	; 54
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
		break;
	
	}
	if (waitForInput)
 1d0:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <waitForInput>
 1d4:	88 23       	and	r24, r24
 1d6:	41 f0       	breq	.+16     	; 0x1e8 <lightLED+0x7c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	25 ed       	ldi	r18, 0xD5	; 213
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <lightLED+0x72>
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <lightLED+0x8e>
 1e8:	2f e7       	ldi	r18, 0x7F	; 127
 1ea:	8a e1       	ldi	r24, 0x1A	; 26
 1ec:	96 e0       	ldi	r25, 0x06	; 6
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <lightLED+0x82>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lightLED+0x8c>
 1f8:	00 00       	nop
		_delay_ms(200);
	else
		_delay_ms(600);
	PORTB_OUT = 0;
 1fa:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <__RODATA_PM_OFFSET__+0x7f8424>
 1fe:	08 95       	ret

00000200 <checkButton>:
}
	

bool checkButton(char b) {
	char expectingButton = sequence[currLight];
 200:	e0 91 09 38 	lds	r30, 0x3809	; 0x803809 <currLight>
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e6 5f       	subi	r30, 0xF6	; 246
 208:	f7 4c       	sbci	r31, 0xC7	; 199
 20a:	20 81       	ld	r18, Z
	isMatch = (expectingButton==b);
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	28 13       	cpse	r18, r24
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <__data_end>
	return isMatch;
}
 216:	89 2f       	mov	r24, r25
 218:	08 95       	ret

0000021a <advanceOrEnd>:

void advanceOrEnd() {
	currLight++;
 21a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <currLight>
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <currLight>
	if (currLight!=lightCount) {
 224:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <lightCount>
 228:	89 17       	cp	r24, r25
 22a:	49 f0       	breq	.+18     	; 0x23e <advanceOrEnd+0x24>
		waitForInput=1;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <waitForInput>
 232:	8d e8       	ldi	r24, 0x8D	; 141
 234:	90 e2       	ldi	r25, 0x20	; 32
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <advanceOrEnd+0x1c>
 23a:	00 00       	nop
 23c:	08 95       	ret
		_delay_ms(10);
	}
	else {
		waitForInput=0;
 23e:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <waitForInput>
 242:	08 95       	ret

00000244 <addToSequence>:
 244:	2a e6       	ldi	r18, 0x6A	; 106
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <addToSequence+0x6>
 252:	00 c0       	rjmp	.+0      	; 0x254 <addToSequence+0x10>
	}
}

void addToSequence() {
	_delay_ms(100);
	int nextLight = (rand()%4);
 254:	0e 94 ed 03 	call	0x7da	; 0x7da <rand>
 258:	83 70       	andi	r24, 0x03	; 3
 25a:	90 78       	andi	r25, 0x80	; 128
 25c:	99 23       	and	r25, r25
 25e:	24 f4       	brge	.+8      	; 0x268 <addToSequence+0x24>
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	8c 6f       	ori	r24, 0xFC	; 252
 264:	9f 6f       	ori	r25, 0xFF	; 255
 266:	01 96       	adiw	r24, 0x01	; 1
	sequence[lightCount] = (char)nextLight;
 268:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <lightCount>
 26c:	e9 2f       	mov	r30, r25
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	e6 5f       	subi	r30, 0xF6	; 246
 272:	f7 4c       	sbci	r31, 0xC7	; 199
 274:	80 83       	st	Z, r24
	lightCount++;
 276:	9f 5f       	subi	r25, 0xFF	; 255
 278:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <lightCount>
 27c:	08 95       	ret

0000027e <playSequence>:
}

void playSequence() {
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
	for(int i = 0; i < lightCount; i++ ) {
 282:	c0 e0       	ldi	r28, 0x00	; 0
 284:	d0 e0       	ldi	r29, 0x00	; 0
 286:	0d c0       	rjmp	.+26     	; 0x2a2 <playSequence+0x24>
		char c = sequence[i];
 288:	fe 01       	movw	r30, r28
 28a:	e6 5f       	subi	r30, 0xF6	; 246
 28c:	f7 4c       	sbci	r31, 0xC7	; 199
 28e:	80 81       	ld	r24, Z
		lightLED(c);
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 b6 00 	call	0x16c	; 0x16c <lightLED>
 296:	82 ec       	ldi	r24, 0xC2	; 194
 298:	92 ea       	ldi	r25, 0xA2	; 162
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <playSequence+0x1c>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <playSequence+0x22>
	sequence[lightCount] = (char)nextLight;
	lightCount++;
}

void playSequence() {
	for(int i = 0; i < lightCount; i++ ) {
 2a0:	21 96       	adiw	r28, 0x01	; 1
 2a2:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <lightCount>
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	c8 17       	cp	r28, r24
 2aa:	d9 07       	cpc	r29, r25
 2ac:	6c f3       	brlt	.-38     	; 0x288 <playSequence+0xa>
		char c = sequence[i];
		lightLED(c);
		_delay_ms(50);
	}
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <playSong>:
	playSong();
}

void playSong() {
	
	playNote(D4,(NOTE_DURATION));
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 ef       	ldi	r23, 0xF0	; 240
 2b8:	80 e7       	ldi	r24, 0x70	; 112
 2ba:	95 e0       	ldi	r25, 0x05	; 5
 2bc:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	
	playNote(A4,(NOTE_DURATION));
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 ef       	ldi	r23, 0xF0	; 240
 2c4:	81 ea       	ldi	r24, 0xA1	; 161
 2c6:	93 e0       	ldi	r25, 0x03	; 3
 2c8:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	
	playNote(F4,(NOTE_DURATION));
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 ef       	ldi	r23, 0xF0	; 240
 2d0:	82 e9       	ldi	r24, 0x92	; 146
 2d2:	94 e0       	ldi	r25, 0x04	; 4
 2d4:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	
	playNote(D5,(NOTE_DURATION));
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	70 ef       	ldi	r23, 0xF0	; 240
 2dc:	88 eb       	ldi	r24, 0xB8	; 184
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	playNote(D5,(NOTE_DURATION));
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 ef       	ldi	r23, 0xF0	; 240
 2e8:	88 eb       	ldi	r24, 0xB8	; 184
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	
	playNote(F4,(NOTE_DURATION));
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 ef       	ldi	r23, 0xF0	; 240
 2f4:	82 e9       	ldi	r24, 0x92	; 146
 2f6:	94 e0       	ldi	r25, 0x04	; 4
 2f8:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	
	playNote(D5,(NOTE_DURATION));
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 ef       	ldi	r23, 0xF0	; 240
 300:	88 eb       	ldi	r24, 0xB8	; 184
 302:	92 e0       	ldi	r25, 0x02	; 2
 304:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	playNote(D5,(NOTE_DURATION));
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	70 ef       	ldi	r23, 0xF0	; 240
 30c:	88 eb       	ldi	r24, 0xB8	; 184
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
 314:	08 95       	ret

00000316 <updateHighScoreIfHigher>:

void updateHighScoreIfHigher() {

	uint8_t *location = (uint8_t *) 0;
	//eeprom_update_byte(location, 11);
	uint8_t score = eeprom_read_byte(location);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <eeprom_read_byte>
	uint8_t currScore = (uint8_t) --lightCount;
 31e:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <lightCount>
 322:	61 50       	subi	r22, 0x01	; 1
 324:	60 93 08 38 	sts	0x3808, r22	; 0x803808 <lightCount>
	if (currScore > score) 
 328:	86 17       	cp	r24, r22
 32a:	20 f4       	brcc	.+8      	; 0x334 <updateHighScoreIfHigher+0x1e>
		eeprom_update_byte(location,lightCount);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 05 04 	call	0x80a	; 0x80a <eeprom_update_byte>
 334:	08 95       	ret

00000336 <endGame>:
	}
}

void endGame() {
	
	playNote(D4,(NOTE_DURATION));
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 ef       	ldi	r23, 0xF0	; 240
 33a:	80 e7       	ldi	r24, 0x70	; 112
 33c:	95 e0       	ldi	r25, 0x05	; 5
 33e:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	playNote(D4,(NOTE_DURATION));
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	70 ef       	ldi	r23, 0xF0	; 240
 346:	80 e7       	ldi	r24, 0x70	; 112
 348:	95 e0       	ldi	r25, 0x05	; 5
 34a:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	
	playNote(Cx3,NOTE_DURATION);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	70 ef       	ldi	r23, 0xF0	; 240
 352:	86 e8       	ldi	r24, 0x86	; 134
 354:	9b e0       	ldi	r25, 0x0B	; 11
 356:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	playNote(Cx3,NOTE_DURATION);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	70 ef       	ldi	r23, 0xF0	; 240
 35e:	86 e8       	ldi	r24, 0x86	; 134
 360:	9b e0       	ldi	r25, 0x0B	; 11
 362:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>

	playNote(C2,NOTE_DURATION);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	70 ef       	ldi	r23, 0xF0	; 240
 36a:	8a e6       	ldi	r24, 0x6A	; 106
 36c:	98 e1       	ldi	r25, 0x18	; 24
 36e:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	playNote(C2,NOTE_DURATION);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	70 ef       	ldi	r23, 0xF0	; 240
 376:	8a e6       	ldi	r24, 0x6A	; 106
 378:	98 e1       	ldi	r25, 0x18	; 24
 37a:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>
	playNote(C2,NOTE_DURATION);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	70 ef       	ldi	r23, 0xF0	; 240
 382:	8a e6       	ldi	r24, 0x6A	; 106
 384:	98 e1       	ldi	r25, 0x18	; 24
 386:	0e 94 87 03 	call	0x70e	; 0x70e <playNote>

	updateHighScoreIfHigher();
 38a:	0e 94 8b 01 	call	0x316	; 0x316 <updateHighScoreIfHigher>

	memset(sequence,'0',1);
 38e:	80 e3       	ldi	r24, 0x30	; 48
 390:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <sequence>
	currLight = 0;
 394:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <currLight>
	waitForInput = 0;
 398:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <waitForInput>
	for (int i=0; i<20; i++) sequence[i]=0;
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <endGame+0x76>
 3a2:	fc 01       	movw	r30, r24
 3a4:	e6 5f       	subi	r30, 0xF6	; 246
 3a6:	f7 4c       	sbci	r31, 0xC7	; 199
 3a8:	10 82       	st	Z, r1
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	84 31       	cpi	r24, 0x14	; 20
 3ae:	91 05       	cpc	r25, r1
 3b0:	c4 f3       	brlt	.-16     	; 0x3a2 <endGame+0x6c>
	lightCount = 0;
 3b2:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <lightCount>
 3b6:	25 e1       	ldi	r18, 0x15	; 21
 3b8:	86 e1       	ldi	r24, 0x16	; 22
 3ba:	95 e0       	ldi	r25, 0x05	; 5
 3bc:	21 50       	subi	r18, 0x01	; 1
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	90 40       	sbci	r25, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <endGame+0x86>
	_delay_ms(500);
	playSong();
 3c4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <playSong>
 3c8:	08 95       	ret

000003ca <main>:
		eeprom_update_byte(location,lightCount);
}

int main(void)
{
	atmel_start_init();
 3ca:	0e 94 5d 00 	call	0xba	; 0xba <atmel_start_init>
	PORTA_OUT = 0; 
 3ce:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
	srand(psuedo);
 3d2:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <psuedo>
 3d6:	90 91 05 38 	lds	r25, 0x3805	; 0x803805 <psuedo+0x1>
 3da:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <srand>
	PORTB_OUT = 0x0F;  
 3de:	c4 e2       	ldi	r28, 0x24	; 36
 3e0:	d4 e0       	ldi	r29, 0x04	; 4
 3e2:	8f e0       	ldi	r24, 0x0F	; 15
 3e4:	88 83       	st	Y, r24

	 displayNumber(NUM0);
 3e6:	8f e3       	ldi	r24, 0x3F	; 63
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 60 00 	call	0xc0	; 0xc0 <displayNumber>
 3ee:	2a e6       	ldi	r18, 0x6A	; 106
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x2a>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x34>
	 _delay_ms(100);
	 displayNumber(NUM1);
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 60 00 	call	0xc0	; 0xc0 <displayNumber>
 406:	2a e6       	ldi	r18, 0x6A	; 106
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	 _delay_ms(100);
	 displayNumber(NUM2);
 416:	8b e5       	ldi	r24, 0x5B	; 91
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 60 00 	call	0xc0	; 0xc0 <displayNumber>
 41e:	2a e6       	ldi	r18, 0x6A	; 106
 420:	84 e0       	ldi	r24, 0x04	; 4
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	21 50       	subi	r18, 0x01	; 1
 426:	80 40       	sbci	r24, 0x00	; 0
 428:	90 40       	sbci	r25, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	 _delay_ms(100);
	 displayNumber(NUM3);
 42e:	8f e4       	ldi	r24, 0x4F	; 79
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 60 00 	call	0xc0	; 0xc0 <displayNumber>
 436:	2a e6       	ldi	r18, 0x6A	; 106
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	 _delay_ms(100);
	 displayNumber(NUM4);
 446:	86 e6       	ldi	r24, 0x66	; 102
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 60 00 	call	0xc0	; 0xc0 <displayNumber>
 44e:	2a e6       	ldi	r18, 0x6A	; 106
 450:	84 e0       	ldi	r24, 0x04	; 4
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	21 50       	subi	r18, 0x01	; 1
 456:	80 40       	sbci	r24, 0x00	; 0
 458:	90 40       	sbci	r25, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	 _delay_ms(100);
	 displayNumber(NUM5);
 45e:	8d e6       	ldi	r24, 0x6D	; 109
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 60 00 	call	0xc0	; 0xc0 <displayNumber>
 466:	2a e6       	ldi	r18, 0x6A	; 106
 468:	84 e0       	ldi	r24, 0x04	; 4
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	 _delay_ms(100);
	 displayNumber(NUM6);
 476:	8d e7       	ldi	r24, 0x7D	; 125
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 60 00 	call	0xc0	; 0xc0 <displayNumber>
 47e:	2a e6       	ldi	r18, 0x6A	; 106
 480:	84 e0       	ldi	r24, 0x04	; 4
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	21 50       	subi	r18, 0x01	; 1
 486:	80 40       	sbci	r24, 0x00	; 0
 488:	90 40       	sbci	r25, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	 _delay_ms(100);
	 displayNumber(NUM7);
 48e:	87 e0       	ldi	r24, 0x07	; 7
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 60 00 	call	0xc0	; 0xc0 <displayNumber>
 496:	2a e6       	ldi	r18, 0x6A	; 106
 498:	84 e0       	ldi	r24, 0x04	; 4
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
	 _delay_ms(100);
	 displayNumber(NUM8);
 4a6:	8f e7       	ldi	r24, 0x7F	; 127
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 60 00 	call	0xc0	; 0xc0 <displayNumber>
 4ae:	2a e6       	ldi	r18, 0x6A	; 106
 4b0:	84 e0       	ldi	r24, 0x04	; 4
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	80 40       	sbci	r24, 0x00	; 0
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
	 _delay_ms(100);
	 displayNumber(NUM9);
 4be:	8f e6       	ldi	r24, 0x6F	; 111
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 60 00 	call	0xc0	; 0xc0 <displayNumber>
 4c6:	2a e6       	ldi	r18, 0x6A	; 106
 4c8:	84 e0       	ldi	r24, 0x04	; 4
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
	 _delay_ms(100);
	 
	 //show high score
	PORTB_OUT = eeprom_read_byte( (uint8_t *) 0);
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 fd 03 	call	0x7fa	; 0x7fa <eeprom_read_byte>
 4de:	88 83       	st	Y, r24
 4e0:	2f ef       	ldi	r18, 0xFF	; 255
 4e2:	84 e3       	ldi	r24, 0x34	; 52
 4e4:	9c e0       	ldi	r25, 0x0C	; 12
 4e6:	21 50       	subi	r18, 0x01	; 1
 4e8:	80 40       	sbci	r24, 0x00	; 0
 4ea:	90 40       	sbci	r25, 0x00	; 0
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4f0:	00 00       	nop
	_delay_ms(1200);
	PORTB_OUT = 0;
 4f2:	18 82       	st	Y, r1
 4f4:	25 ed       	ldi	r18, 0xD5	; 213
 4f6:	88 e0       	ldi	r24, 0x08	; 8
 4f8:	92 e0       	ldi	r25, 0x02	; 2
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	80 40       	sbci	r24, 0x00	; 0
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
	_delay_ms(200);
		
	playSong();
 502:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <playSong>
		
	while (1) {			
		
		 if (!waitForInput) {
 506:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <waitForInput>
 50a:	81 11       	cpse	r24, r1
 50c:	09 c0       	rjmp	.+18     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			 currLight = 0;
 50e:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <currLight>
			 addToSequence();
 512:	0e 94 22 01 	call	0x244	; 0x244 <addToSequence>
			 playSequence();
 516:	0e 94 3f 01 	call	0x27e	; 0x27e <playSequence>
			 waitForInput = 1;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <waitForInput>
		 }

		 if (!BTN_R_get_level()) 
 520:	50 99       	sbic	0x0a, 0	; 10
 522:	17 c0       	rjmp	.+46     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
		 {
			 lightLED(0);
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 b6 00 	call	0x16c	; 0x16c <lightLED>
 52c:	2f e9       	ldi	r18, 0x9F	; 159
 52e:	86 e8       	ldi	r24, 0x86	; 134
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	21 50       	subi	r18, 0x01	; 1
 534:	80 40       	sbci	r24, 0x00	; 0
 536:	90 40       	sbci	r25, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 53c:	00 00       	nop
			 _delay_ms(150);
			 checkButton(0) ? advanceOrEnd() : endGame();
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 00 01 	call	0x200	; 0x200 <checkButton>
 544:	88 23       	and	r24, r24
 546:	19 f0       	breq	.+6      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 548:	0e 94 0d 01 	call	0x21a	; 0x21a <advanceOrEnd>
 54c:	02 c0       	rjmp	.+4      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 54e:	0e 94 9b 01 	call	0x336	; 0x336 <endGame>
		 }
		 
		 if (!BTN_Y_get_level())
 552:	51 99       	sbic	0x0a, 1	; 10
 554:	17 c0       	rjmp	.+46     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
		 {
			lightLED(1);
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 b6 00 	call	0x16c	; 0x16c <lightLED>
 55e:	2f e9       	ldi	r18, 0x9F	; 159
 560:	86 e8       	ldi	r24, 0x86	; 134
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	21 50       	subi	r18, 0x01	; 1
 566:	80 40       	sbci	r24, 0x00	; 0
 568:	90 40       	sbci	r25, 0x00	; 0
 56a:	e1 f7       	brne	.-8      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 56e:	00 00       	nop
			_delay_ms(150);
			checkButton(1) ? advanceOrEnd() : endGame();
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 00 01 	call	0x200	; 0x200 <checkButton>
 576:	88 23       	and	r24, r24
 578:	19 f0       	breq	.+6      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57a:	0e 94 0d 01 	call	0x21a	; 0x21a <advanceOrEnd>
 57e:	02 c0       	rjmp	.+4      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 580:	0e 94 9b 01 	call	0x336	; 0x336 <endGame>

		 }
		 
		if (!BTN_G_get_level())
 584:	52 99       	sbic	0x0a, 2	; 10
 586:	17 c0       	rjmp	.+46     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
		{
			lightLED(2);
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 b6 00 	call	0x16c	; 0x16c <lightLED>
 590:	2f e9       	ldi	r18, 0x9F	; 159
 592:	86 e8       	ldi	r24, 0x86	; 134
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	21 50       	subi	r18, 0x01	; 1
 598:	80 40       	sbci	r24, 0x00	; 0
 59a:	90 40       	sbci	r25, 0x00	; 0
 59c:	e1 f7       	brne	.-8      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 5a0:	00 00       	nop
			_delay_ms(150);			
			checkButton(2) ? advanceOrEnd() : endGame();
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	0e 94 00 01 	call	0x200	; 0x200 <checkButton>
 5a8:	88 23       	and	r24, r24
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5ac:	0e 94 0d 01 	call	0x21a	; 0x21a <advanceOrEnd>
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5b2:	0e 94 9b 01 	call	0x336	; 0x336 <endGame>
		}
		  
		if (!BTN_B_get_level()) 
 5b6:	53 99       	sbic	0x0a, 3	; 10
 5b8:	a6 cf       	rjmp	.-180    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		{
			lightLED(3);
 5ba:	83 e0       	ldi	r24, 0x03	; 3
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 b6 00 	call	0x16c	; 0x16c <lightLED>
 5c2:	2f e9       	ldi	r18, 0x9F	; 159
 5c4:	86 e8       	ldi	r24, 0x86	; 134
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	21 50       	subi	r18, 0x01	; 1
 5ca:	80 40       	sbci	r24, 0x00	; 0
 5cc:	90 40       	sbci	r25, 0x00	; 0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5d2:	00 00       	nop
			_delay_ms(150);
			checkButton(3) ? advanceOrEnd() : endGame();
 5d4:	83 e0       	ldi	r24, 0x03	; 3
 5d6:	0e 94 00 01 	call	0x200	; 0x200 <checkButton>
 5da:	88 23       	and	r24, r24
 5dc:	19 f0       	breq	.+6      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5de:	0e 94 0d 01 	call	0x21a	; 0x21a <advanceOrEnd>
 5e2:	91 cf       	rjmp	.-222    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 5e4:	0e 94 9b 01 	call	0x336	; 0x336 <endGame>
 5e8:	8e cf       	rjmp	.-228    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>

000005ea <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	08 95       	ret

000005ee <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 95       	ret

000005f2 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	08 95       	ret

000005f6 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	08 c0       	rjmp	.+16     	; 0x60a <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 5fa:	e8 2f       	mov	r30, r24
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	e0 5f       	subi	r30, 0xF0	; 240
 600:	fb 4f       	sbci	r31, 0xFB	; 251
 602:	90 81       	ld	r25, Z
 604:	98 60       	ori	r25, 0x08	; 8
 606:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	88 30       	cpi	r24, 0x08	; 8
 60c:	b0 f3       	brcs	.-20     	; 0x5fa <mcu_init+0x4>
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	08 c0       	rjmp	.+16     	; 0x622 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 612:	e8 2f       	mov	r30, r24
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	e0 5d       	subi	r30, 0xD0	; 208
 618:	fb 4f       	sbci	r31, 0xFB	; 251
 61a:	90 81       	ld	r25, Z
 61c:	98 60       	ori	r25, 0x08	; 8
 61e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	88 30       	cpi	r24, 0x08	; 8
 624:	b0 f3       	brcs	.-20     	; 0x612 <mcu_init+0x1c>
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	08 c0       	rjmp	.+16     	; 0x63a <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 62a:	e8 2f       	mov	r30, r24
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	e0 5b       	subi	r30, 0xB0	; 176
 630:	fb 4f       	sbci	r31, 0xFB	; 251
 632:	90 81       	ld	r25, Z
 634:	98 60       	ori	r25, 0x08	; 8
 636:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 638:	8f 5f       	subi	r24, 0xFF	; 255
 63a:	88 30       	cpi	r24, 0x08	; 8
 63c:	b0 f3       	brcs	.-20     	; 0x62a <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 63e:	08 95       	ret

00000640 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 640:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 644:	81 b1       	in	r24, 0x01	; 1
 646:	8d 7f       	andi	r24, 0xFD	; 253
 648:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 64a:	80 b1       	in	r24, 0x00	; 0
 64c:	82 60       	ori	r24, 0x02	; 2
 64e:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 650:	81 b1       	in	r24, 0x01	; 1
 652:	8b 7f       	andi	r24, 0xFB	; 251
 654:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 656:	80 b1       	in	r24, 0x00	; 0
 658:	84 60       	ori	r24, 0x04	; 4
 65a:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 65c:	81 b1       	in	r24, 0x01	; 1
 65e:	87 7f       	andi	r24, 0xF7	; 247
 660:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 662:	80 b1       	in	r24, 0x00	; 0
 664:	88 60       	ori	r24, 0x08	; 8
 666:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 668:	81 b1       	in	r24, 0x01	; 1
 66a:	8f 7e       	andi	r24, 0xEF	; 239
 66c:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 66e:	80 b1       	in	r24, 0x00	; 0
 670:	80 61       	ori	r24, 0x10	; 16
 672:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 674:	81 b1       	in	r24, 0x01	; 1
 676:	8f 7d       	andi	r24, 0xDF	; 223
 678:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 67a:	80 b1       	in	r24, 0x00	; 0
 67c:	80 62       	ori	r24, 0x20	; 32
 67e:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 680:	81 b1       	in	r24, 0x01	; 1
 682:	8f 7b       	andi	r24, 0xBF	; 191
 684:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 686:	80 b1       	in	r24, 0x00	; 0
 688:	80 64       	ori	r24, 0x40	; 64
 68a:	80 b9       	out	0x00, r24	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 68c:	85 b1       	in	r24, 0x05	; 5
 68e:	8e 7f       	andi	r24, 0xFE	; 254
 690:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 692:	84 b1       	in	r24, 0x04	; 4
 694:	81 60       	ori	r24, 0x01	; 1
 696:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 698:	85 b1       	in	r24, 0x05	; 5
 69a:	8d 7f       	andi	r24, 0xFD	; 253
 69c:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 69e:	84 b1       	in	r24, 0x04	; 4
 6a0:	82 60       	ori	r24, 0x02	; 2
 6a2:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 6a4:	85 b1       	in	r24, 0x05	; 5
 6a6:	8b 7f       	andi	r24, 0xFB	; 251
 6a8:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 6aa:	84 b1       	in	r24, 0x04	; 4
 6ac:	84 60       	ori	r24, 0x04	; 4
 6ae:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 6b0:	85 b1       	in	r24, 0x05	; 5
 6b2:	87 7f       	andi	r24, 0xF7	; 247
 6b4:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 6b6:	84 b1       	in	r24, 0x04	; 4
 6b8:	88 60       	ori	r24, 0x08	; 8
 6ba:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 6bc:	88 b1       	in	r24, 0x08	; 8
 6be:	8e 7f       	andi	r24, 0xFE	; 254
 6c0:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 6c2:	e0 e5       	ldi	r30, 0x50	; 80
 6c4:	f4 e0       	ldi	r31, 0x04	; 4
 6c6:	80 81       	ld	r24, Z
 6c8:	88 60       	ori	r24, 0x08	; 8
 6ca:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 6cc:	88 b1       	in	r24, 0x08	; 8
 6ce:	8d 7f       	andi	r24, 0xFD	; 253
 6d0:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 6d2:	e1 e5       	ldi	r30, 0x51	; 81
 6d4:	f4 e0       	ldi	r31, 0x04	; 4
 6d6:	80 81       	ld	r24, Z
 6d8:	88 60       	ori	r24, 0x08	; 8
 6da:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 6dc:	88 b1       	in	r24, 0x08	; 8
 6de:	8b 7f       	andi	r24, 0xFB	; 251
 6e0:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 6e2:	e2 e5       	ldi	r30, 0x52	; 82
 6e4:	f4 e0       	ldi	r31, 0x04	; 4
 6e6:	80 81       	ld	r24, Z
 6e8:	88 60       	ori	r24, 0x08	; 8
 6ea:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 6ec:	88 b1       	in	r24, 0x08	; 8
 6ee:	87 7f       	andi	r24, 0xF7	; 247
 6f0:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 6f2:	e3 e5       	ldi	r30, 0x53	; 83
 6f4:	f4 e0       	ldi	r31, 0x04	; 4
 6f6:	80 81       	ld	r24, Z
 6f8:	88 60       	ori	r24, 0x08	; 8
 6fa:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CLKCTRL_init();
 6fc:	0e 94 f7 02 	call	0x5ee	; 0x5ee <CLKCTRL_init>

	CPUINT_init();
 700:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <CPUINT_init>

	SLPCTRL_init();
 704:	0e 94 9f 03 	call	0x73e	; 0x73e <SLPCTRL_init>

	BOD_init();
 708:	0e 94 f5 02 	call	0x5ea	; 0x5ea <BOD_init>
 70c:	08 95       	ret

0000070e <playNote>:


void playNote(uint16_t period, uint16_t duration) {
  uint16_t elapsed;
  uint16_t i;
  for (elapsed = 0; elapsed < duration; elapsed += period) {
 70e:	40 e0       	ldi	r20, 0x00	; 0
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	11 c0       	rjmp	.+34     	; 0x736 <playNote+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 714:	00 00       	nop
                     /* For loop with variable delay selects the pitch */
    for (i = 0; i < period; i++) {
 716:	2f 5f       	subi	r18, 0xFF	; 255
 718:	3f 4f       	sbci	r19, 0xFF	; 255
 71a:	02 c0       	rjmp	.+4      	; 0x720 <playNote+0x12>
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	28 17       	cp	r18, r24
 722:	39 07       	cpc	r19, r25
 724:	b8 f3       	brcs	.-18     	; 0x714 <playNote+0x6>
      _delay_us(1);
    }
    PORTA.OUT ^= 0b00000010;
 726:	e0 e0       	ldi	r30, 0x00	; 0
 728:	f4 e0       	ldi	r31, 0x04	; 4
 72a:	34 81       	ldd	r19, Z+4	; 0x04
 72c:	22 e0       	ldi	r18, 0x02	; 2
 72e:	23 27       	eor	r18, r19
 730:	24 83       	std	Z+4, r18	; 0x04


void playNote(uint16_t period, uint16_t duration) {
  uint16_t elapsed;
  uint16_t i;
  for (elapsed = 0; elapsed < duration; elapsed += period) {
 732:	48 0f       	add	r20, r24
 734:	59 1f       	adc	r21, r25
 736:	46 17       	cp	r20, r22
 738:	57 07       	cpc	r21, r23
 73a:	80 f3       	brcs	.-32     	; 0x71c <playNote+0xe>
    for (i = 0; i < period; i++) {
      _delay_us(1);
    }
    PORTA.OUT ^= 0b00000010;
  }
}
 73c:	08 95       	ret

0000073e <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	08 95       	ret

00000742 <do_rand>:
 742:	8f 92       	push	r8
 744:	9f 92       	push	r9
 746:	af 92       	push	r10
 748:	bf 92       	push	r11
 74a:	cf 92       	push	r12
 74c:	df 92       	push	r13
 74e:	ef 92       	push	r14
 750:	ff 92       	push	r15
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	ec 01       	movw	r28, r24
 758:	68 81       	ld	r22, Y
 75a:	79 81       	ldd	r23, Y+1	; 0x01
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	9b 81       	ldd	r25, Y+3	; 0x03
 760:	61 15       	cp	r22, r1
 762:	71 05       	cpc	r23, r1
 764:	81 05       	cpc	r24, r1
 766:	91 05       	cpc	r25, r1
 768:	21 f4       	brne	.+8      	; 0x772 <do_rand+0x30>
 76a:	64 e2       	ldi	r22, 0x24	; 36
 76c:	79 ed       	ldi	r23, 0xD9	; 217
 76e:	8b e5       	ldi	r24, 0x5B	; 91
 770:	97 e0       	ldi	r25, 0x07	; 7
 772:	2d e1       	ldi	r18, 0x1D	; 29
 774:	33 ef       	ldi	r19, 0xF3	; 243
 776:	41 e0       	ldi	r20, 0x01	; 1
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	0e 94 24 04 	call	0x848	; 0x848 <__divmodsi4>
 77e:	49 01       	movw	r8, r18
 780:	5a 01       	movw	r10, r20
 782:	9b 01       	movw	r18, r22
 784:	ac 01       	movw	r20, r24
 786:	a7 ea       	ldi	r26, 0xA7	; 167
 788:	b1 e4       	ldi	r27, 0x41	; 65
 78a:	0e 94 43 04 	call	0x886	; 0x886 <__muluhisi3>
 78e:	6b 01       	movw	r12, r22
 790:	7c 01       	movw	r14, r24
 792:	ac ee       	ldi	r26, 0xEC	; 236
 794:	b4 ef       	ldi	r27, 0xF4	; 244
 796:	a5 01       	movw	r20, r10
 798:	94 01       	movw	r18, r8
 79a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__mulohisi3>
 79e:	dc 01       	movw	r26, r24
 7a0:	cb 01       	movw	r24, r22
 7a2:	8c 0d       	add	r24, r12
 7a4:	9d 1d       	adc	r25, r13
 7a6:	ae 1d       	adc	r26, r14
 7a8:	bf 1d       	adc	r27, r15
 7aa:	b7 ff       	sbrs	r27, 7
 7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <do_rand+0x72>
 7ae:	01 97       	sbiw	r24, 0x01	; 1
 7b0:	a1 09       	sbc	r26, r1
 7b2:	b0 48       	sbci	r27, 0x80	; 128
 7b4:	88 83       	st	Y, r24
 7b6:	99 83       	std	Y+1, r25	; 0x01
 7b8:	aa 83       	std	Y+2, r26	; 0x02
 7ba:	bb 83       	std	Y+3, r27	; 0x03
 7bc:	9f 77       	andi	r25, 0x7F	; 127
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	ff 90       	pop	r15
 7c4:	ef 90       	pop	r14
 7c6:	df 90       	pop	r13
 7c8:	cf 90       	pop	r12
 7ca:	bf 90       	pop	r11
 7cc:	af 90       	pop	r10
 7ce:	9f 90       	pop	r9
 7d0:	8f 90       	pop	r8
 7d2:	08 95       	ret

000007d4 <rand_r>:
 7d4:	0e 94 a1 03 	call	0x742	; 0x742 <do_rand>
 7d8:	08 95       	ret

000007da <rand>:
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	98 e3       	ldi	r25, 0x38	; 56
 7de:	0e 94 a1 03 	call	0x742	; 0x742 <do_rand>
 7e2:	08 95       	ret

000007e4 <srand>:
 7e4:	a0 e0       	ldi	r26, 0x00	; 0
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 7ec:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 7f0:	a0 93 02 38 	sts	0x3802, r26	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 7f4:	b0 93 03 38 	sts	0x3803, r27	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
 7f8:	08 95       	ret

000007fa <eeprom_read_byte>:
 7fa:	03 d0       	rcall	.+6      	; 0x802 <eeprom_mapen>
 7fc:	80 81       	ld	r24, Z
 7fe:	99 27       	eor	r25, r25
 800:	08 95       	ret

00000802 <eeprom_mapen>:
 802:	fc 01       	movw	r30, r24
 804:	e0 50       	subi	r30, 0x00	; 0
 806:	fc 4e       	sbci	r31, 0xEC	; 236
 808:	08 95       	ret

0000080a <eeprom_update_byte>:
 80a:	26 2f       	mov	r18, r22

0000080c <eeprom_update_r18>:
 80c:	0e 94 01 04 	call	0x802	; 0x802 <eeprom_mapen>
 810:	00 80       	ld	r0, Z
 812:	02 16       	cp	r0, r18
 814:	19 f0       	breq	.+6      	; 0x81c <eeprom_update_r18+0x10>
 816:	0e 94 11 04 	call	0x822	; 0x822 <eeprom_write_r18>
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	01 97       	sbiw	r24, 0x01	; 1
 81e:	08 95       	ret

00000820 <eeprom_write_byte>:
 820:	26 2f       	mov	r18, r22

00000822 <eeprom_write_r18>:
 822:	af 93       	push	r26
 824:	bf 93       	push	r27
 826:	e0 e0       	ldi	r30, 0x00	; 0
 828:	f0 e1       	ldi	r31, 0x10	; 16
 82a:	32 81       	ldd	r19, Z+2	; 0x02
 82c:	31 fd       	sbrc	r19, 1
 82e:	fd cf       	rjmp	.-6      	; 0x82a <eeprom_write_r18+0x8>
 830:	dc 01       	movw	r26, r24
 832:	a0 50       	subi	r26, 0x00	; 0
 834:	bc 4e       	sbci	r27, 0xEC	; 236
 836:	2c 93       	st	X, r18
 838:	2d e9       	ldi	r18, 0x9D	; 157
 83a:	24 bf       	out	0x34, r18	; 52
 83c:	23 e0       	ldi	r18, 0x03	; 3
 83e:	20 83       	st	Z, r18
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	bf 91       	pop	r27
 844:	af 91       	pop	r26
 846:	08 95       	ret

00000848 <__divmodsi4>:
 848:	05 2e       	mov	r0, r21
 84a:	97 fb       	bst	r25, 7
 84c:	1e f4       	brtc	.+6      	; 0x854 <__divmodsi4+0xc>
 84e:	00 94       	com	r0
 850:	0e 94 3b 04 	call	0x876	; 0x876 <__negsi2>
 854:	57 fd       	sbrc	r21, 7
 856:	07 d0       	rcall	.+14     	; 0x866 <__divmodsi4_neg2>
 858:	0e 94 56 04 	call	0x8ac	; 0x8ac <__udivmodsi4>
 85c:	07 fc       	sbrc	r0, 7
 85e:	03 d0       	rcall	.+6      	; 0x866 <__divmodsi4_neg2>
 860:	4e f4       	brtc	.+18     	; 0x874 <__divmodsi4_exit>
 862:	0c 94 3b 04 	jmp	0x876	; 0x876 <__negsi2>

00000866 <__divmodsi4_neg2>:
 866:	50 95       	com	r21
 868:	40 95       	com	r20
 86a:	30 95       	com	r19
 86c:	21 95       	neg	r18
 86e:	3f 4f       	sbci	r19, 0xFF	; 255
 870:	4f 4f       	sbci	r20, 0xFF	; 255
 872:	5f 4f       	sbci	r21, 0xFF	; 255

00000874 <__divmodsi4_exit>:
 874:	08 95       	ret

00000876 <__negsi2>:
 876:	90 95       	com	r25
 878:	80 95       	com	r24
 87a:	70 95       	com	r23
 87c:	61 95       	neg	r22
 87e:	7f 4f       	sbci	r23, 0xFF	; 255
 880:	8f 4f       	sbci	r24, 0xFF	; 255
 882:	9f 4f       	sbci	r25, 0xFF	; 255
 884:	08 95       	ret

00000886 <__muluhisi3>:
 886:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__umulhisi3>
 88a:	a5 9f       	mul	r26, r21
 88c:	90 0d       	add	r25, r0
 88e:	b4 9f       	mul	r27, r20
 890:	90 0d       	add	r25, r0
 892:	a4 9f       	mul	r26, r20
 894:	80 0d       	add	r24, r0
 896:	91 1d       	adc	r25, r1
 898:	11 24       	eor	r1, r1
 89a:	08 95       	ret

0000089c <__mulshisi3>:
 89c:	b7 ff       	sbrs	r27, 7
 89e:	0c 94 43 04 	jmp	0x886	; 0x886 <__muluhisi3>

000008a2 <__mulohisi3>:
 8a2:	0e 94 43 04 	call	0x886	; 0x886 <__muluhisi3>
 8a6:	82 1b       	sub	r24, r18
 8a8:	93 0b       	sbc	r25, r19
 8aa:	08 95       	ret

000008ac <__udivmodsi4>:
 8ac:	a1 e2       	ldi	r26, 0x21	; 33
 8ae:	1a 2e       	mov	r1, r26
 8b0:	aa 1b       	sub	r26, r26
 8b2:	bb 1b       	sub	r27, r27
 8b4:	fd 01       	movw	r30, r26
 8b6:	0d c0       	rjmp	.+26     	; 0x8d2 <__udivmodsi4_ep>

000008b8 <__udivmodsi4_loop>:
 8b8:	aa 1f       	adc	r26, r26
 8ba:	bb 1f       	adc	r27, r27
 8bc:	ee 1f       	adc	r30, r30
 8be:	ff 1f       	adc	r31, r31
 8c0:	a2 17       	cp	r26, r18
 8c2:	b3 07       	cpc	r27, r19
 8c4:	e4 07       	cpc	r30, r20
 8c6:	f5 07       	cpc	r31, r21
 8c8:	20 f0       	brcs	.+8      	; 0x8d2 <__udivmodsi4_ep>
 8ca:	a2 1b       	sub	r26, r18
 8cc:	b3 0b       	sbc	r27, r19
 8ce:	e4 0b       	sbc	r30, r20
 8d0:	f5 0b       	sbc	r31, r21

000008d2 <__udivmodsi4_ep>:
 8d2:	66 1f       	adc	r22, r22
 8d4:	77 1f       	adc	r23, r23
 8d6:	88 1f       	adc	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	1a 94       	dec	r1
 8dc:	69 f7       	brne	.-38     	; 0x8b8 <__udivmodsi4_loop>
 8de:	60 95       	com	r22
 8e0:	70 95       	com	r23
 8e2:	80 95       	com	r24
 8e4:	90 95       	com	r25
 8e6:	9b 01       	movw	r18, r22
 8e8:	ac 01       	movw	r20, r24
 8ea:	bd 01       	movw	r22, r26
 8ec:	cf 01       	movw	r24, r30
 8ee:	08 95       	ret

000008f0 <__umulhisi3>:
 8f0:	a2 9f       	mul	r26, r18
 8f2:	b0 01       	movw	r22, r0
 8f4:	b3 9f       	mul	r27, r19
 8f6:	c0 01       	movw	r24, r0
 8f8:	a3 9f       	mul	r26, r19
 8fa:	70 0d       	add	r23, r0
 8fc:	81 1d       	adc	r24, r1
 8fe:	11 24       	eor	r1, r1
 900:	91 1d       	adc	r25, r1
 902:	b2 9f       	mul	r27, r18
 904:	70 0d       	add	r23, r0
 906:	81 1d       	adc	r24, r1
 908:	11 24       	eor	r1, r1
 90a:	91 1d       	adc	r25, r1
 90c:	08 95       	ret

0000090e <_exit>:
 90e:	f8 94       	cli

00000910 <__stop_program>:
 910:	ff cf       	rjmp	.-2      	; 0x910 <__stop_program>


SimonGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000005de  00000672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  00000678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000006e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d03  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0a  00000000  00000000  000024f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009af  00000000  00000000  00002efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000038ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080e  00000000  00000000  000039b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e1  00000000  00000000  000041c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00004aa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  9e:	0c 94 ed 02 	jmp	0x5da	; 0x5da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <time>:
  a6:	fc 01       	movw	r30, r24
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__system_time>
  b0:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <__system_time+0x1>
  b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__system_time+0x2>
  b8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__system_time+0x3>
  bc:	0f be       	out	0x3f, r0	; 63
  be:	30 97       	sbiw	r30, 0x00	; 0
  c0:	21 f0       	breq	.+8      	; 0xca <time+0x24>
  c2:	60 83       	st	Z, r22
  c4:	71 83       	std	Z+1, r23	; 0x01
  c6:	82 83       	std	Z+2, r24	; 0x02
  c8:	93 83       	std	Z+3, r25	; 0x03
  ca:	08 95       	ret

000000cc <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  cc:	0e 94 9c 01 	call	0x338	; 0x338 <system_init>
  d0:	08 95       	ret

000000d2 <lightLED>:
	memset(sequence,'0',1);
	currLight = 0;
	waitForInput = 0;
}

void playSong(int leng) {
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <lightLED+0xa>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	8a 95       	dec	r24
  de:	e2 f7       	brpl	.-8      	; 0xd8 <lightLED+0x6>
  e0:	29 b9       	out	0x09, r18	; 9
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	83 ec       	ldi	r24, 0xC3	; 195
  e6:	99 e0       	ldi	r25, 0x09	; 9
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <lightLED+0x16>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lightLED+0x20>
  f2:	00 00       	nop
  f4:	19 b8       	out	0x09, r1	; 9
  f6:	08 95       	ret

000000f8 <checkButton>:
  f8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	e9 5f       	subi	r30, 0xF9	; 249
 100:	fe 4f       	sbci	r31, 0xFE	; 254
 102:	20 81       	ld	r18, Z
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	28 13       	cpse	r18, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	89 2f       	mov	r24, r25
 10c:	08 95       	ret

0000010e <advanceOrEnd>:
 10e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	61 f4       	brne	.+24     	; 0x12e <advanceOrEnd+0x20>
 116:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <waitForInput>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	83 ed       	ldi	r24, 0xD3	; 211
 11e:	90 e3       	ldi	r25, 0x30	; 48
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <advanceOrEnd+0x12>
 128:	00 c0       	rjmp	.+0      	; 0x12a <advanceOrEnd+0x1c>
 12a:	00 00       	nop
 12c:	08 95       	ret
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 134:	08 95       	ret

00000136 <addToSequence>:
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <time>
 13e:	cb 01       	movw	r24, r22
 140:	0e 94 69 02 	call	0x4d2	; 0x4d2 <srand>
 144:	0e 94 64 02 	call	0x4c8	; 0x4c8 <rand>
 148:	83 70       	andi	r24, 0x03	; 3
 14a:	90 78       	andi	r25, 0x80	; 128
 14c:	99 23       	and	r25, r25
 14e:	24 f4       	brge	.+8      	; 0x158 <addToSequence+0x22>
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	8c 6f       	ori	r24, 0xFC	; 252
 154:	9f 6f       	ori	r25, 0xFF	; 255
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	02 96       	adiw	r24, 0x02	; 2
 15a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__system_time>
 15e:	08 95       	ret

00000160 <playSequence>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
 168:	11 c0       	rjmp	.+34     	; 0x18c <playSequence+0x2c>
 16a:	fe 01       	movw	r30, r28
 16c:	e9 5f       	subi	r30, 0xF9	; 249
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	80 81       	ld	r24, Z
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 69 00 	call	0xd2	; 0xd2 <lightLED>
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	85 ea       	ldi	r24, 0xA5	; 165
 17c:	9e e0       	ldi	r25, 0x0E	; 14
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <playSequence+0x1e>
 186:	00 c0       	rjmp	.+0      	; 0x188 <playSequence+0x28>
 188:	00 00       	nop
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	20 97       	sbiw	r28, 0x00	; 0
 18e:	69 f3       	breq	.-38     	; 0x16a <playSequence+0xa>
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <updateHighScoreIfHigher>:
	
}

void updateHighScoreIfHigher() {
	
	uint8_t score = eeprom_read_byte(0);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <eeprom_read_byte>
	if (sizeof sequence > score) eeprom_write_byte(0,score);
 19e:	81 11       	cpse	r24, r1
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <updateHighScoreIfHigher+0x16>
 1a2:	68 2f       	mov	r22, r24
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <eeprom_write_byte>
 1ac:	08 95       	ret

000001ae <endGame>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	80 e7       	ldi	r24, 0x70	; 112
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <endGame+0x6>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <endGame+0x10>
 1be:	00 00       	nop
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	86 e1       	ldi	r24, 0x16	; 22
 1c4:	91 e1       	ldi	r25, 0x11	; 17
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <endGame+0x18>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <endGame+0x22>
 1d0:	00 00       	nop
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	86 e1       	ldi	r24, 0x16	; 22
 1d6:	91 e1       	ldi	r25, 0x11	; 17
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <endGame+0x2a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <endGame+0x34>
 1e2:	00 00       	nop
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	83 ec       	ldi	r24, 0xC3	; 195
 1e8:	99 e0       	ldi	r25, 0x09	; 9
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <endGame+0x3c>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <endGame+0x46>
 1f4:	00 00       	nop
	//tone(SPKR,NOTE_C2,350);
	_delay_ms(350);

	_delay_ms(200);

	updateHighScoreIfHigher();
 1f6:	0e 94 cb 00 	call	0x196	; 0x196 <updateHighScoreIfHigher>

	//playSong();
	
	memset(sequence,'0',1);
 1fa:	80 e3       	ldi	r24, 0x30	; 48
 1fc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sequence>
	currLight = 0;
 200:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	waitForInput = 0;
 204:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <waitForInput>
 208:	08 95       	ret

0000020a <main>:
	if (sizeof sequence > score) eeprom_write_byte(0,score);
}

int main(void)
{
	atmel_start_init();
 20a:	0e 94 66 00 	call	0xcc	; 0xcc <atmel_start_init>
	DDRD = 0b00111100; //PD2-5 as output
 20e:	8c e3       	ldi	r24, 0x3C	; 60
 210:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00010000; //PB4 is speaker as output
 212:	80 e1       	ldi	r24, 0x10	; 16
 214:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00001111; //PB0-3 as input pullup
 216:	8f e0       	ldi	r24, 0x0F	; 15
 218:	85 b9       	out	0x05, r24	; 5
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);
 21a:	87 b1       	in	r24, 0x07	; 7
 21c:	8d 7f       	andi	r24, 0xFD	; 253
 21e:	87 b9       	out	0x07, r24	; 7

		PORTC |= 1 << pin;
 220:	88 b1       	in	r24, 0x08	; 8
 222:	82 60       	ori	r24, 0x02	; 2
 224:	88 b9       	out	0x08, r24	; 8
	PORTC_set_pin_pull_mode(1,1);
 	 //playATone();
	 if (PORTC & 1<<1 == 1) {
 226:	88 b1       	in	r24, 0x08	; 8
		//reset high score
		eeprom_write_byte(0x00,4);
		 
	 } else {
		 //show high score 
		 uint8_t score = eeprom_read_byte(0x00);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <eeprom_read_byte>
		 PORTD = score<<2;
 230:	88 0f       	add	r24, r24
 232:	88 0f       	add	r24, r24
 234:	8b b9       	out	0x0b, r24	; 11
	 }
	 
	 PORTD = 0;
 236:	1b b8       	out	0x0b, r1	; 11
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	89 e6       	ldi	r24, 0x69	; 105
 23c:	98 e1       	ldi	r25, 0x18	; 24
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x34>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x3e>
 248:	00 00       	nop
	 
	while (1) {			
		
		//Play song
		
		 if (!waitForInput) {
 24a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <waitForInput>
 24e:	81 11       	cpse	r24, r1
 250:	09 c0       	rjmp	.+18     	; 0x264 <main+0x5a>
			 currLight = 0;
 252:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
			 addToSequence();
 256:	0e 94 9b 00 	call	0x136	; 0x136 <addToSequence>
			 playSequence();
 25a:	0e 94 b0 00 	call	0x160	; 0x160 <playSequence>
			 waitForInput = 1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <waitForInput>
		 }

		 if (PINB == 0b00000001 ) //button PB1 is pressed
 264:	83 b1       	in	r24, 0x03	; 3
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	b9 f4       	brne	.+46     	; 0x298 <main+0x8e>
		 {
			 lightLED(R);
 26a:	85 e3       	ldi	r24, 0x35	; 53
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 69 00 	call	0xd2	; 0xd2 <lightLED>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	84 e3       	ldi	r24, 0x34	; 52
 276:	9c e0       	ldi	r25, 0x0C	; 12
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x6e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x78>
 282:	00 00       	nop
			 _delay_ms(250);
			 checkButton(R) ? advanceOrEnd() : endGame();
 284:	85 e3       	ldi	r24, 0x35	; 53
 286:	0e 94 7c 00 	call	0xf8	; 0xf8 <checkButton>
 28a:	88 23       	and	r24, r24
 28c:	19 f0       	breq	.+6      	; 0x294 <main+0x8a>
 28e:	0e 94 87 00 	call	0x10e	; 0x10e <advanceOrEnd>
 292:	02 c0       	rjmp	.+4      	; 0x298 <main+0x8e>
 294:	0e 94 d7 00 	call	0x1ae	; 0x1ae <endGame>
		 }
		 
		 if (PINB == 0b00000010) //button PB1 is pressed
 298:	83 b1       	in	r24, 0x03	; 3
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	b9 f4       	brne	.+46     	; 0x2cc <main+0xc2>
		 {
			lightLED(Y);
 29e:	84 e3       	ldi	r24, 0x34	; 52
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 69 00 	call	0xd2	; 0xd2 <lightLED>
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	84 e3       	ldi	r24, 0x34	; 52
 2aa:	9c e0       	ldi	r25, 0x0C	; 12
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0xa2>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0xac>
 2b6:	00 00       	nop
			_delay_ms(250);
			checkButton(Y) ? advanceOrEnd() : endGame();
 2b8:	84 e3       	ldi	r24, 0x34	; 52
 2ba:	0e 94 7c 00 	call	0xf8	; 0xf8 <checkButton>
 2be:	88 23       	and	r24, r24
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <main+0xbe>
 2c2:	0e 94 87 00 	call	0x10e	; 0x10e <advanceOrEnd>
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <main+0xc2>
 2c8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <endGame>

		 }
		 
		if (PINB == 0b00000100 ) //button PB1 is pressed
 2cc:	83 b1       	in	r24, 0x03	; 3
 2ce:	84 30       	cpi	r24, 0x04	; 4
 2d0:	b9 f4       	brne	.+46     	; 0x300 <main+0xf6>
		{
			lightLED(G);
 2d2:	83 e3       	ldi	r24, 0x33	; 51
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 69 00 	call	0xd2	; 0xd2 <lightLED>
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	84 e3       	ldi	r24, 0x34	; 52
 2de:	9c e0       	ldi	r25, 0x0C	; 12
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0xd6>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0xe0>
 2ea:	00 00       	nop
			_delay_ms(250);			
			checkButton(G) ? advanceOrEnd() : endGame();
 2ec:	83 e3       	ldi	r24, 0x33	; 51
 2ee:	0e 94 7c 00 	call	0xf8	; 0xf8 <checkButton>
 2f2:	88 23       	and	r24, r24
 2f4:	19 f0       	breq	.+6      	; 0x2fc <main+0xf2>
 2f6:	0e 94 87 00 	call	0x10e	; 0x10e <advanceOrEnd>
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <main+0xf6>
 2fc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <endGame>
		}
		  
		if (PINB == 0b00001000) //button PB1 is pressed
 300:	83 b1       	in	r24, 0x03	; 3
 302:	88 30       	cpi	r24, 0x08	; 8
 304:	09 f0       	breq	.+2      	; 0x308 <main+0xfe>
 306:	a1 cf       	rjmp	.-190    	; 0x24a <main+0x40>
		{
			lightLED(B);
 308:	82 e3       	ldi	r24, 0x32	; 50
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 69 00 	call	0xd2	; 0xd2 <lightLED>
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	84 e3       	ldi	r24, 0x34	; 52
 314:	9c e0       	ldi	r25, 0x0C	; 12
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <main+0x10c>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x116>
 320:	00 00       	nop
			_delay_ms(250);
			checkButton(B) ? advanceOrEnd() : endGame();
 322:	82 e3       	ldi	r24, 0x32	; 50
 324:	0e 94 7c 00 	call	0xf8	; 0xf8 <checkButton>
 328:	88 23       	and	r24, r24
 32a:	19 f0       	breq	.+6      	; 0x332 <main+0x128>
 32c:	0e 94 87 00 	call	0x10e	; 0x10e <advanceOrEnd>
 330:	8c cf       	rjmp	.-232    	; 0x24a <main+0x40>
 332:	0e 94 d7 00 	call	0x1ae	; 0x1ae <endGame>
 336:	89 cf       	rjmp	.-238    	; 0x24a <main+0x40>

00000338 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
 338:	8f ee       	ldi	r24, 0xEF	; 239
 33a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 342:	85 b1       	in	r24, 0x05	; 5
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 348:	87 b1       	in	r24, 0x07	; 7
 34a:	80 78       	andi	r24, 0x80	; 128
 34c:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
 34e:	88 b1       	in	r24, 0x08	; 8
 350:	8f 67       	ori	r24, 0x7F	; 127
 352:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 354:	8a b1       	in	r24, 0x0a	; 10
 356:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 358:	8b b1       	in	r24, 0x0b	; 11
 35a:	9b b9       	out	0x0b, r25	; 11
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 35c:	84 b1       	in	r24, 0x04	; 4
 35e:	8e 7f       	andi	r24, 0xFE	; 254
 360:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 362:	85 b1       	in	r24, 0x05	; 5
 364:	81 60       	ori	r24, 0x01	; 1
 366:	85 b9       	out	0x05, r24	; 5
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRB &= ~(1 << pin);
 368:	84 b1       	in	r24, 0x04	; 4
 36a:	8e 7f       	andi	r24, 0xFE	; 254
 36c:	84 b9       	out	0x04, r24	; 4

		PORTB |= 1 << pin;
 36e:	85 b1       	in	r24, 0x05	; 5
 370:	81 60       	ori	r24, 0x01	; 1
 372:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 374:	84 b1       	in	r24, 0x04	; 4
 376:	8d 7f       	andi	r24, 0xFD	; 253
 378:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 37a:	85 b1       	in	r24, 0x05	; 5
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	85 b9       	out	0x05, r24	; 5
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRB &= ~(1 << pin);
 380:	84 b1       	in	r24, 0x04	; 4
 382:	8d 7f       	andi	r24, 0xFD	; 253
 384:	84 b9       	out	0x04, r24	; 4

		PORTB |= 1 << pin;
 386:	85 b1       	in	r24, 0x05	; 5
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 38c:	84 b1       	in	r24, 0x04	; 4
 38e:	8b 7f       	andi	r24, 0xFB	; 251
 390:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 392:	85 b1       	in	r24, 0x05	; 5
 394:	84 60       	ori	r24, 0x04	; 4
 396:	85 b9       	out	0x05, r24	; 5
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRB &= ~(1 << pin);
 398:	84 b1       	in	r24, 0x04	; 4
 39a:	8b 7f       	andi	r24, 0xFB	; 251
 39c:	84 b9       	out	0x04, r24	; 4

		PORTB |= 1 << pin;
 39e:	85 b1       	in	r24, 0x05	; 5
 3a0:	84 60       	ori	r24, 0x04	; 4
 3a2:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 3a4:	84 b1       	in	r24, 0x04	; 4
 3a6:	87 7f       	andi	r24, 0xF7	; 247
 3a8:	84 b9       	out	0x04, r24	; 4
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 3aa:	85 b1       	in	r24, 0x05	; 5
 3ac:	88 60       	ori	r24, 0x08	; 8
 3ae:	85 b9       	out	0x05, r24	; 5
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRB &= ~(1 << pin);
 3b0:	84 b1       	in	r24, 0x04	; 4
 3b2:	87 7f       	andi	r24, 0xF7	; 247
 3b4:	84 b9       	out	0x04, r24	; 4

		PORTB |= 1 << pin;
 3b6:	85 b1       	in	r24, 0x05	; 5
 3b8:	88 60       	ori	r24, 0x08	; 8
 3ba:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 3bc:	84 b1       	in	r24, 0x04	; 4
 3be:	80 61       	ori	r24, 0x10	; 16
 3c0:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 3c2:	85 b1       	in	r24, 0x05	; 5
 3c4:	8f 7e       	andi	r24, 0xEF	; 239
 3c6:	85 b9       	out	0x05, r24	; 5
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
 3c8:	87 b1       	in	r24, 0x07	; 7
 3ca:	8f 7b       	andi	r24, 0xBF	; 191
 3cc:	87 b9       	out	0x07, r24	; 7
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 3ce:	88 b1       	in	r24, 0x08	; 8
 3d0:	80 64       	ori	r24, 0x40	; 64
 3d2:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);
 3d4:	87 b1       	in	r24, 0x07	; 7
 3d6:	8f 7b       	andi	r24, 0xBF	; 191
 3d8:	87 b9       	out	0x07, r24	; 7

		PORTC |= 1 << pin;
 3da:	88 b1       	in	r24, 0x08	; 8
 3dc:	80 64       	ori	r24, 0x40	; 64
 3de:	88 b9       	out	0x08, r24	; 8
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 3e0:	8a b1       	in	r24, 0x0a	; 10
 3e2:	84 60       	ori	r24, 0x04	; 4
 3e4:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 3e6:	8b b1       	in	r24, 0x0b	; 11
 3e8:	8b 7f       	andi	r24, 0xFB	; 251
 3ea:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 3ec:	8a b1       	in	r24, 0x0a	; 10
 3ee:	88 60       	ori	r24, 0x08	; 8
 3f0:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 3f2:	8b b1       	in	r24, 0x0b	; 11
 3f4:	87 7f       	andi	r24, 0xF7	; 247
 3f6:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 3f8:	8a b1       	in	r24, 0x0a	; 10
 3fa:	80 61       	ori	r24, 0x10	; 16
 3fc:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 3fe:	8b b1       	in	r24, 0x0b	; 11
 400:	8f 7e       	andi	r24, 0xEF	; 239
 402:	8b b9       	out	0x0b, r24	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 404:	8a b1       	in	r24, 0x0a	; 10
 406:	80 62       	ori	r24, 0x20	; 32
 408:	8a b9       	out	0x0a, r24	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 40a:	8b b1       	in	r24, 0x0b	; 11
 40c:	8f 7d       	andi	r24, 0xDF	; 223
 40e:	8b b9       	out	0x0b, r24	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	60 e8       	ldi	r22, 0x80	; 128
 414:	81 e6       	ldi	r24, 0x61	; 97
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 11 02 	call	0x422	; 0x422 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 41c:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 41e:	15 be       	out	0x35, r1	; 53
 420:	08 95       	ret

00000422 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 422:	2f b7       	in	r18, 0x3f	; 63
	cli
 424:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 426:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 428:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 42a:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 42c:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 42e:	08 95       	ret

00000430 <do_rand>:
 430:	8f 92       	push	r8
 432:	9f 92       	push	r9
 434:	af 92       	push	r10
 436:	bf 92       	push	r11
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	ec 01       	movw	r28, r24
 446:	68 81       	ld	r22, Y
 448:	79 81       	ldd	r23, Y+1	; 0x01
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	9b 81       	ldd	r25, Y+3	; 0x03
 44e:	61 15       	cp	r22, r1
 450:	71 05       	cpc	r23, r1
 452:	81 05       	cpc	r24, r1
 454:	91 05       	cpc	r25, r1
 456:	21 f4       	brne	.+8      	; 0x460 <do_rand+0x30>
 458:	64 e2       	ldi	r22, 0x24	; 36
 45a:	79 ed       	ldi	r23, 0xD9	; 217
 45c:	8b e5       	ldi	r24, 0x5B	; 91
 45e:	97 e0       	ldi	r25, 0x07	; 7
 460:	2d e1       	ldi	r18, 0x1D	; 29
 462:	33 ef       	ldi	r19, 0xF3	; 243
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	0e 94 8a 02 	call	0x514	; 0x514 <__divmodsi4>
 46c:	49 01       	movw	r8, r18
 46e:	5a 01       	movw	r10, r20
 470:	9b 01       	movw	r18, r22
 472:	ac 01       	movw	r20, r24
 474:	a7 ea       	ldi	r26, 0xA7	; 167
 476:	b1 e4       	ldi	r27, 0x41	; 65
 478:	0e 94 a9 02 	call	0x552	; 0x552 <__muluhisi3>
 47c:	6b 01       	movw	r12, r22
 47e:	7c 01       	movw	r14, r24
 480:	ac ee       	ldi	r26, 0xEC	; 236
 482:	b4 ef       	ldi	r27, 0xF4	; 244
 484:	a5 01       	movw	r20, r10
 486:	94 01       	movw	r18, r8
 488:	0e 94 b7 02 	call	0x56e	; 0x56e <__mulohisi3>
 48c:	dc 01       	movw	r26, r24
 48e:	cb 01       	movw	r24, r22
 490:	8c 0d       	add	r24, r12
 492:	9d 1d       	adc	r25, r13
 494:	ae 1d       	adc	r26, r14
 496:	bf 1d       	adc	r27, r15
 498:	b7 ff       	sbrs	r27, 7
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <do_rand+0x72>
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	a1 09       	sbc	r26, r1
 4a0:	b0 48       	sbci	r27, 0x80	; 128
 4a2:	88 83       	st	Y, r24
 4a4:	99 83       	std	Y+1, r25	; 0x01
 4a6:	aa 83       	std	Y+2, r26	; 0x02
 4a8:	bb 83       	std	Y+3, r27	; 0x03
 4aa:	9f 77       	andi	r25, 0x7F	; 127
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	9f 90       	pop	r9
 4be:	8f 90       	pop	r8
 4c0:	08 95       	ret

000004c2 <rand_r>:
 4c2:	0e 94 18 02 	call	0x430	; 0x430 <do_rand>
 4c6:	08 95       	ret

000004c8 <rand>:
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 18 02 	call	0x430	; 0x430 <do_rand>
 4d0:	08 95       	ret

000004d2 <srand>:
 4d2:	a0 e0       	ldi	r26, 0x00	; 0
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4de:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 4e2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 4e6:	08 95       	ret

000004e8 <eeprom_read_byte>:
 4e8:	f9 99       	sbic	0x1f, 1	; 31
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <eeprom_read_byte>
 4ec:	92 bd       	out	0x22, r25	; 34
 4ee:	81 bd       	out	0x21, r24	; 33
 4f0:	f8 9a       	sbi	0x1f, 0	; 31
 4f2:	99 27       	eor	r25, r25
 4f4:	80 b5       	in	r24, 0x20	; 32
 4f6:	08 95       	ret

000004f8 <eeprom_write_byte>:
 4f8:	26 2f       	mov	r18, r22

000004fa <eeprom_write_r18>:
 4fa:	f9 99       	sbic	0x1f, 1	; 31
 4fc:	fe cf       	rjmp	.-4      	; 0x4fa <eeprom_write_r18>
 4fe:	1f ba       	out	0x1f, r1	; 31
 500:	92 bd       	out	0x22, r25	; 34
 502:	81 bd       	out	0x21, r24	; 33
 504:	20 bd       	out	0x20, r18	; 32
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	fa 9a       	sbi	0x1f, 2	; 31
 50c:	f9 9a       	sbi	0x1f, 1	; 31
 50e:	0f be       	out	0x3f, r0	; 63
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	08 95       	ret

00000514 <__divmodsi4>:
 514:	05 2e       	mov	r0, r21
 516:	97 fb       	bst	r25, 7
 518:	1e f4       	brtc	.+6      	; 0x520 <__divmodsi4+0xc>
 51a:	00 94       	com	r0
 51c:	0e 94 a1 02 	call	0x542	; 0x542 <__negsi2>
 520:	57 fd       	sbrc	r21, 7
 522:	07 d0       	rcall	.+14     	; 0x532 <__divmodsi4_neg2>
 524:	0e 94 bc 02 	call	0x578	; 0x578 <__udivmodsi4>
 528:	07 fc       	sbrc	r0, 7
 52a:	03 d0       	rcall	.+6      	; 0x532 <__divmodsi4_neg2>
 52c:	4e f4       	brtc	.+18     	; 0x540 <__divmodsi4_exit>
 52e:	0c 94 a1 02 	jmp	0x542	; 0x542 <__negsi2>

00000532 <__divmodsi4_neg2>:
 532:	50 95       	com	r21
 534:	40 95       	com	r20
 536:	30 95       	com	r19
 538:	21 95       	neg	r18
 53a:	3f 4f       	sbci	r19, 0xFF	; 255
 53c:	4f 4f       	sbci	r20, 0xFF	; 255
 53e:	5f 4f       	sbci	r21, 0xFF	; 255

00000540 <__divmodsi4_exit>:
 540:	08 95       	ret

00000542 <__negsi2>:
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	08 95       	ret

00000552 <__muluhisi3>:
 552:	0e 94 de 02 	call	0x5bc	; 0x5bc <__umulhisi3>
 556:	a5 9f       	mul	r26, r21
 558:	90 0d       	add	r25, r0
 55a:	b4 9f       	mul	r27, r20
 55c:	90 0d       	add	r25, r0
 55e:	a4 9f       	mul	r26, r20
 560:	80 0d       	add	r24, r0
 562:	91 1d       	adc	r25, r1
 564:	11 24       	eor	r1, r1
 566:	08 95       	ret

00000568 <__mulshisi3>:
 568:	b7 ff       	sbrs	r27, 7
 56a:	0c 94 a9 02 	jmp	0x552	; 0x552 <__muluhisi3>

0000056e <__mulohisi3>:
 56e:	0e 94 a9 02 	call	0x552	; 0x552 <__muluhisi3>
 572:	82 1b       	sub	r24, r18
 574:	93 0b       	sbc	r25, r19
 576:	08 95       	ret

00000578 <__udivmodsi4>:
 578:	a1 e2       	ldi	r26, 0x21	; 33
 57a:	1a 2e       	mov	r1, r26
 57c:	aa 1b       	sub	r26, r26
 57e:	bb 1b       	sub	r27, r27
 580:	fd 01       	movw	r30, r26
 582:	0d c0       	rjmp	.+26     	; 0x59e <__udivmodsi4_ep>

00000584 <__udivmodsi4_loop>:
 584:	aa 1f       	adc	r26, r26
 586:	bb 1f       	adc	r27, r27
 588:	ee 1f       	adc	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	a2 17       	cp	r26, r18
 58e:	b3 07       	cpc	r27, r19
 590:	e4 07       	cpc	r30, r20
 592:	f5 07       	cpc	r31, r21
 594:	20 f0       	brcs	.+8      	; 0x59e <__udivmodsi4_ep>
 596:	a2 1b       	sub	r26, r18
 598:	b3 0b       	sbc	r27, r19
 59a:	e4 0b       	sbc	r30, r20
 59c:	f5 0b       	sbc	r31, r21

0000059e <__udivmodsi4_ep>:
 59e:	66 1f       	adc	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	88 1f       	adc	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	1a 94       	dec	r1
 5a8:	69 f7       	brne	.-38     	; 0x584 <__udivmodsi4_loop>
 5aa:	60 95       	com	r22
 5ac:	70 95       	com	r23
 5ae:	80 95       	com	r24
 5b0:	90 95       	com	r25
 5b2:	9b 01       	movw	r18, r22
 5b4:	ac 01       	movw	r20, r24
 5b6:	bd 01       	movw	r22, r26
 5b8:	cf 01       	movw	r24, r30
 5ba:	08 95       	ret

000005bc <__umulhisi3>:
 5bc:	a2 9f       	mul	r26, r18
 5be:	b0 01       	movw	r22, r0
 5c0:	b3 9f       	mul	r27, r19
 5c2:	c0 01       	movw	r24, r0
 5c4:	a3 9f       	mul	r26, r19
 5c6:	70 0d       	add	r23, r0
 5c8:	81 1d       	adc	r24, r1
 5ca:	11 24       	eor	r1, r1
 5cc:	91 1d       	adc	r25, r1
 5ce:	b2 9f       	mul	r27, r18
 5d0:	70 0d       	add	r23, r0
 5d2:	81 1d       	adc	r24, r1
 5d4:	11 24       	eor	r1, r1
 5d6:	91 1d       	adc	r25, r1
 5d8:	08 95       	ret

000005da <_exit>:
 5da:	f8 94       	cli

000005dc <__stop_program>:
 5dc:	ff cf       	rjmp	.-2      	; 0x5dc <__stop_program>
